==============================ques1=====================

--------------------------LargeFinder.java------------------
package day12.q1.code;

public class LargeFinder {

	public static int findlarge(int arr[]) {

		int lar = Integer.MIN_VALUE;

		for (int i = 1; i < arr.length; i++) {

			if (lar < arr[i])

				lar = arr[i];

		}

		return lar;

	}

}

-------------------------TestLargeFinder.java------------------
package day12.q1.test;

import static org.junit.Assert.*;

import org.junit.Test;

import day12.q1.code.LargeFinder;

public class TestLargeFinder {

	@Test
	public void UTC_01() {
		int[] arr = { 2, 8, 3, 1, 5 };
		int expected = 8;
		int actual = LargeFinder.findlarge(arr);
		assertEquals(expected, actual);
	}

	@Test
	public void UTC_02() {
		int[] arr = { 2, 8, 0, 1, 9 };
		int expected = 9;
		int actual = LargeFinder.findlarge(arr);
		assertEquals(expected, actual);
	}

	@Test
	public void UTC_03() {
		int[] arr = { 12, 8, 0, 1, 9 };
		int expected = 9;
		int actual = LargeFinder.findlarge(arr);
		assertEquals(expected, actual);
	}

	@Test
	public void UTC_04() {
		int[] arr = { 2, 8, 0, 1, -9 };
		int expected = 8;
		int actual = LargeFinder.findlarge(arr);
		assertEquals(expected, actual);

	}

	@Test
	public void UTC_05() {
		int[] arr = { -2, -8, -1, -9 };
		int expected = -1;
		int actual = LargeFinder.findlarge(arr);
		assertEquals(expected, actual);

	}

}
============================ques2=======================

-----------------------MedianFinder.java---------------
package day12.q2.code;

import java.util.Arrays;
import java.util.Scanner;

public class MedianFinder {

	public static void getValues(String[] args) {
		int l = args.length;
		int arOrg[] = new int[l];

		for (int i = 0; i < l; i++) {
			arOrg[i] = Integer.parseInt(args[i]);
		}
		int arNew[] = null;
		arNew = copyRotate(arOrg);
		int median = findMedian(arNew);
		

	}

	public static int findMedian(int[] ar) {
		int l = ar.length;
		if (l % 2 == 0) {
			int val1 = ar[(l / 2) - 1];
			int val2 = ar[l / 2];
			int mean = (val1 + val2) / 2;
			return mean;
		}
		return ar[((l + 1) / 2) - 1];
	}

	public static int[] copyRotate(int[] ar) {
		int l = ar.length;
		int arNew[] = new int[l];
		for (int i = 0; i < l; i++) {
			int nexti = (i + 1) % l;
			arNew[nexti] = ar[i];
		}
		return arNew;
	}

}
-----------------AllTests.java----------------------
package day12.q2.test;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;
import org.junit.runners.Suite.SuiteClasses;

@RunWith(Suite.class)
@SuiteClasses({ TestCopyRotate.class, TestFindMedian.class })
public class AllTests {

}

-------------------TestCopyRotate.java---------------
package day12.q2.test;

import static org.junit.Assert.assertTrue;

import java.util.Arrays;

import org.junit.Test;

import day12.q2.code.MedianFinder;

public class TestCopyRotate {

	@Test
	public void UTC_01() {
		int arOrg[] = { 2, 6, 4, 8 };
		int expected[] = { 8, 2, 6, 4 };
		int actual[] = MedianFinder.copyRotate(arOrg);
		assertTrue(Arrays.equals(expected, actual));
	}

	@Test
	public void UTC_02() {
		int arOrg[] = { 2, 6, 4, 8, 1 };
		int expected[] = { 1, 2, 6, 4, 8 };
		int actual[] = MedianFinder.copyRotate(arOrg);
		assertTrue(Arrays.equals(expected, actual));
	}
}
---------------------TestFindMedian.java-------------------
package day12.q2.test;

import static org.junit.Assert.*;

import org.junit.Test;

import day12.q2.code.MedianFinder;

public class TestFindMedian {

	@Test
	public void UTC_01() {

		int ar[] = { 2, 7, 3, 4 };
		int expected = 5;
		int actual = MedianFinder.findMedian(ar);
		assertEquals(expected, actual);

	}

	@Test
	public void UTC_02() {

		int ar[] = { 2, 7, 3, 4, 9 };
		int expected = 3;
		int actual = MedianFinder.findMedian(ar);
		assertEquals(expected, actual);

	}

}

===============================ques3======================

-----------------------QuadraticSolver.java----------------
package day12.q3.code;

public class QuadraticSolver {

	public static double[] findRoots(double a, double b, double c) {

		double d = (b * b) - (4 * a * c);

		if (d < 0)
			throw new ImaginaryRootsException();
		double dRoot=Math.sqrt(d);

		double root1 = ((-b) + dRoot) / (2 * a);
		double root2 = ((-b) - dRoot) / (2 * a);

		double[] roots = new double[2];
		roots[0] = root1;
		roots[1] = root2;
		return roots;

	}

}

---------------ImaginaryRootsException.java-------------------
package day12.q3.code;

public class ImaginaryRootsException extends RuntimeException {

	public ImaginaryRootsException() {
		super("The roots are Imaginary");
	}

}

---------------------TestFindRoots.java-------------
package day12.q3.test;

import static org.junit.Assert.*;

import java.util.Arrays;

import org.junit.Test;

import day12.q3.code.ImaginaryRootsException;
import day12.q3.code.QuadraticSolver;

public class TestFindRoots {

	@Test
	public void UTC_01() {

		double[] actual = QuadraticSolver.findRoots(2, 5, 3);
		double[] expected = { -1.0, -1.5 };

		assertTrue(Arrays.equals(expected, actual));

	}

	@Test(expected = ImaginaryRootsException.class)
	public void UTC_02() {

		QuadraticSolver.findRoots(1, 2, 3);

	}
	
	@Test
	public void UTC_03() {

		double[] actual = QuadraticSolver.findRoots(3, 10, 3);
		System.out.println(actual[0]+" "+actual[1]);
		double[] expected = { (double)(-1.0/3.0), -3.0 };

		assertTrue(Arrays.equals(expected, actual));

	}
}
